#include "LightEQps.cb"

Texture2D gTex;
SamplerState samLinear : register(s0)
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};

struct PSPointIn
{
    float4 pos   : SV_Position;
    float3 norm  : NORMAL;    
    float2 tex   : TEXTURE0;
    float3 vPos  : TEXTURE1;
	float3 ePos  : TEXTURE2;
    float3 lt1Dir : TEXTURE3;
    float3 lt2Dir : TEXTURE4;
    float3 lt3Dir : TEXTURE5;
    float4 color : COLOR0;
};

//-------- Light Equation ---------
float3 Shade(float3 v,
			 uniform float3 n,
			 uniform float3 Kd,
			 uniform float3 Ks,
			 uniform float m,
			 uniform uint lightCount,
			 uniform float3 l[MAXLIGHTS],
			 uniform float3 EL[MAXLIGHTS])
{
	// float3 v = normalize(pv - p);
	float3 Lo = float3(0.0f, 0.0f, 0.0f);
	for (uint k=0; k < lightCount; k++)
	{
		float3 h = normalize(v + l[k]);
		float cosTh = saturate(dot(n,h));
		float cosTi = saturate(dot(n, l[k]));
		Lo += ((Kd + Ks * pow(cosTh,m)) * EL[k] * cosTi);
	}
	return Lo;
}




//--------------------------------------------------------------------------------------
// PS 
//--------------------------------------------------------------------------------------
float4 PSLightEQTrnsMain(PSPointIn input) : SV_Target
{
	float4 Kd = gTex.Sample( samLinear, input.tex);
	Kd.rgb = Kd.rgb * piInv;
	//return Kd;
	float3 Ks = ((gmPow + 8) * 0.125f * piInv) * gSpec;
	float3 v = normalize(input.vPos-input.ePos);
	float3 lt[MAXLIGHTS] = {normalize(input.lt1Dir.xyz), normalize(input.lt2Dir.xyz), normalize(input.lt3Dir.xyz)};
    float3  el[MAXLIGHTS] = {gEl1, gEl2, gEl3};
    float3 color = Shade( v, normalize(input.norm),Kd.rgb,Ks,gmPow,MAXLIGHTS,lt,el);
	return float4(color,Kd.a);
	
}