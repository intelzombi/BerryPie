#include "LightEQps.cb"

Texture2D gTex;
Texture2D gShadowMap;
SamplerState samLinear : register(s0);
SamplerState samShadow : register(s1);
//{
//Filter = MIN_MAG_MIP_LINEAR;
//AddressU = Wrap;
//AddressV = Wrap;
//};

struct PSPointIn
{
    float4 pos   : SV_Position;
    float3 norm  : NORMAL;    
    float2 tex   : TEXTURE0;
    float3 vPos  : TEXTURE1;
	float3 ePos  : TEXTURE2;
	float4 lpos  : TEXTURE3;		
    float4 color : COLOR0;
};

//-------- Light Equation ---------
float3 Shade(float3 v,
			 uniform float3 n,
			 uniform float3 Kd,
			 uniform float3 Ks,
			 uniform float m,
			 uniform uint lightCount,
			 uniform float3 l[MAXLIGHTS],
			 uniform float3 EL[MAXLIGHTS])
{
	// float3 v = normalize(pv - p);
	float3 Lo = float3(0.0f, 0.0f, 0.0f);
	for (uint k=0; k < lightCount; k++)
	{
		float3 h = normalize(v + l[k]);
		float cosTh = saturate(dot(n,h));
		float cosTi = saturate(dot(n, l[k]));
		Lo += ((Kd + Ks * pow(cosTh,m)) * EL[k] * cosTi);
	}
	return Lo;
}


//--------------------------------------------------------------------------------------
// PS 
//--------------------------------------------------------------------------------------
float4 ShadowLightEQPS(PSPointIn input) : SV_TARGET
{
	input.lpos.xyz /= input.lpos.w;

	//float3 firstLight = gEl1;
	float3 firstLight = float3( 0.0f, 0.0f, 0.0f );

	if( input.lpos.x > -1.0f && input.lpos.x < 1.0f && 
		input.lpos.y > -1.0f && input.lpos.y < 1.0f &&
		input.lpos.z > 0.0f  && input.lpos.z < 1.0f )
	{
		input.lpos.x = input.lpos.x/2 + 0.5;
		input.lpos.y = input.lpos.y/-2 + 0.5;

		//apply shadow map bias
		//input.lpos.z -= 0.0005f;  //shadowMapBias; // NonLinear Shadow Map
		input.lpos.z =  (input.lpos.z * input.lpos.w) -0.0005f;  //shadowMapBias;  // Linear Shadow Map

		//sample shadow map - point sampler
		float shadowMapDepth = gShadowMap.Sample(samShadow, input.lpos.xy).r;
		if (input.lpos.z <= shadowMapDepth ) 
			firstLight = gEl1;
		//else
			//firstLight = float3( 10.1f, 0.1f, 0.1f );
    }


	float4 Kd = gTex.Sample( samLinear, input.tex) * piInv;
	float3 Ks = ((gmPow + 8) * 0.125f * piInv) * gSpec;
	float3 v = normalize(input.vPos-input.ePos);
	float3 lt[MAXLIGHTS] = {normalize(gLightDir1W.xyz), normalize(gLightDir2W.xyz), normalize(gLightDir3W.xyz)};
    float3  el[MAXLIGHTS] = {firstLight, gEl2, gEl3};
	//float3 lt[MAXLIGHTS] = {normalize(input.lt1Dir.xyz)};
    //float3  el[MAXLIGHTS] = {gEl1};
    float3 color = Shade( v, normalize(input.norm),Kd.rgb,Ks,gmPow,MAXLIGHTS,lt,el);
	return float4(color,1.0f);
}